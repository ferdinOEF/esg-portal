generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String       @id @default(cuid())
  name               String?
  email              String?      @unique
  emailVerified      DateTime?
  image              String?
  hashedPassword     String?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  accounts           Account[]
  assessmentsUpdated Assessment[] @relation("AssessmentUpdatedBy")
  evidencesUploaded  Evidence[]   @relation("EvidenceUploadedBy")
  memberships        Membership[]
  sessions           Session[]
}

model Company {
  id            String   @id @default(cuid())
  name          String
  industry      String?
  employees     Int?
  revenueBand   String?
  export        Boolean  @default(false)
  exportRegions String[] @default([])
  tags          String[] @default([])

  schemes     CompanyScheme[] // join table links to Scheme
  memberships Membership[] // if you have a Membership model
  evidences   Evidence[] // if Evidence has companyId
  assessments Assessment[] // if Assessment has companyId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CompanyScheme {
  id        String  @id @default(cuid())
  company   Company @relation(fields: [companyId], references: [id])
  companyId String
  scheme    Scheme  @relation(fields: [schemeId], references: [id])
  schemeId  String

  status   String  @default("suggested") // suggested | in-progress | compliant | not-applicable
  notes    String?
  priority Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Membership {
  id        String  @id @default(cuid())
  role      Role    @default(USER)
  userId    String
  companyId String
  company   Company @relation(fields: [companyId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, companyId])
}

model Framework {
  id           String        @id @default(cuid())
  code         String        @unique
  title        String
  description  String?
  requirements Requirement[]
}

model Requirement {
  id          String       @id @default(cuid())
  frameworkId String
  code        String
  title       String
  description String?
  category    String?
  weight      Int          @default(1)
  assessments Assessment[]
  evidences   Evidence[]
  framework   Framework    @relation(fields: [frameworkId], references: [id])

  @@unique([frameworkId, code])
}

model File {
  id          String    @id @default(cuid())
  filename    String
  mimeType    String
  sizeBytes   Int
  storagePath String
  createdAt   DateTime  @default(now())
  evidence    Evidence?
}

model Evidence {
  id            String      @id @default(cuid())
  companyId     String
  requirementId String
  title         String
  fileId        String?     @unique
  url           String?
  note          String?
  uploadedById  String?
  uploadedAt    DateTime    @default(now())
  company       Company     @relation(fields: [companyId], references: [id])
  file          File?       @relation(fields: [fileId], references: [id])
  requirement   Requirement @relation(fields: [requirementId], references: [id])
  uploadedBy    User?       @relation("EvidenceUploadedBy", fields: [uploadedById], references: [id])
}

model Assessment {
  id            String           @id @default(cuid())
  companyId     String
  requirementId String
  status        AssessmentStatus @default(PENDING)
  score         Int?
  notes         String?
  updatedById   String?
  updatedAt     DateTime         @default(now())
  company       Company          @relation(fields: [companyId], references: [id])
  requirement   Requirement      @relation(fields: [requirementId], references: [id])
  updatedBy     User?            @relation("AssessmentUpdatedBy", fields: [updatedById], references: [id])

  @@unique([companyId, requirementId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Scheme {
  id               String          @id @default(cuid())
  code             String          @unique
  title            String
  category         String
  issuingAuthority String?
  mandatory        Boolean         @default(false)
  description      String?
  eligibility      String?
  process          String?
  benefits         String?
  deadlines        String?
  features         String[]        @default([])
  tags             String[]        @default([])
  references       Json?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  companySchemes   CompanyScheme[]

  @@index([category])
  @@index([code])
}

enum Role {
  ADMIN
  MANAGER
  USER
  AUDITOR
}

enum AssessmentStatus {
  PENDING
  COMPLIANT
  PARTIAL
  NON_COMPLIANT
}
