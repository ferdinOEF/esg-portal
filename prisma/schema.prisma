generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(cuid())
  name           String?
  email          String?     @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?

  accounts Account[]
  sessions Session[]
  memberships Membership[]

  evidencesUploaded  Evidence[]   @relation("EvidenceUploadedBy")
  assessmentsUpdated Assessment[] @relation("AssessmentUpdatedBy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Company {
  id        String       @id @default(cuid())
  name      String
  industry  String?
  website   String?
  abn       String?
  address   String?
  phone     String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  memberships Membership[]
  evidences   Evidence[]
  assessments Assessment[]
}

model Membership {
  id        String  @id @default(cuid())
  role      Role    @default(USER)
  userId    String
  companyId String

  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  @@unique([userId, companyId])
}

enum Role {
  ADMIN
  MANAGER
  USER
  AUDITOR
}

model Framework {
  id           String        @id @default(cuid())
  code         String        @unique
  title        String
  description  String?
  requirements Requirement[]
}

model Requirement {
  id           String    @id @default(cuid())
  frameworkId  String
  code         String
  title        String
  description  String?
  category     String?
  weight       Int       @default(1)

  framework    Framework @relation(fields: [frameworkId], references: [id])
  evidences    Evidence[]
  assessments  Assessment[]

  @@unique([frameworkId, code])
}

model File {
  id          String   @id @default(cuid())
  filename    String
  mimeType    String
  sizeBytes   Int
  storagePath String
  createdAt   DateTime @default(now())

  evidence Evidence?
}

model Evidence {
  id            String   @id @default(cuid())
  companyId     String
  requirementId String

  title        String
  fileId       String?   @unique
  url          String?
  note         String?
  uploadedById String?
  uploadedAt   DateTime  @default(now())

  company     Company     @relation(fields: [companyId], references: [id])
  requirement Requirement  @relation(fields: [requirementId], references: [id])
  file        File?        @relation(fields: [fileId], references: [id])
  uploadedBy  User?        @relation(name: "EvidenceUploadedBy", fields: [uploadedById], references: [id])
}

model Assessment {
  id             String   @id @default(cuid())
  companyId      String
  requirementId  String

  status     AssessmentStatus @default(PENDING)
  score      Int?
  notes      String?
  updatedById String?
  updatedAt  DateTime @default(now())

  company     Company     @relation(fields: [companyId], references: [id])
  requirement Requirement  @relation(fields: [requirementId], references: [id])
  updatedBy   User?        @relation(name: "AssessmentUpdatedBy", fields: [updatedById], references: [id])

  @@unique([companyId, requirementId])
}

enum AssessmentStatus {
  PENDING
  COMPLIANT
  PARTIAL
  NON_COMPLIANT
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}
